jobs:
  - job: 'push_container'
    displayName: 'Tag & Push'
    # Set timeout for jobs
    timeoutInMinutes: 60
    # Base system
    pool:
      vmImage: 'Ubuntu-22.04'
    # Pipeline steps
    steps:
      - template: '../steps/prerequisites/install_docker.yaml'
      - template: "../steps/prerequisites/install_cosign.yaml"

      # Get the container archives
      - ${{ each arch in parameters.architectures }}:
          - task: DownloadPipelineArtifact@2
            inputs:
              source: '${{ parameters.artifactSource }}'
              artifact: Containers-${{ arch }}
              path: $(System.DefaultWorkingDirectory)/
              project: '${{ parameters.artifactProject }}'
              pipeline: '${{ parameters.artifactPipeline }}'
              runVersion: '${{ parameters.artifactRunVersion }}'
              runId: '${{ parameters.artifactRunId }}'
            displayName: "Download the ${{ arch }} container archives"
          - bash: tar -xvf containers-${{ arch }}.tar
            displayName: "Untar the ${{ arch }} containers"
          - bash: rm containers-${{ arch }}.tar
            displayName: "Delete the original archive with the ${{ arch }} containers"

      # Push containers and their manifests
      - bash: "docker login -u $DOCKER_USER -p $DOCKER_PASS $DOCKER_REGISTRY"
        displayName: "Login to container registry"
        env:
          BUILD_REASON: $(Build.Reason)
          BRANCH: $(Build.SourceBranch)
          DOCKER_USER: $(QUAY_USER)
          DOCKER_PASS: $(QUAY_PASS)
          DOCKER_REGISTRY: "quay.io"
      - bash: "make docker_delete_manifest"
        displayName: "Delete existing container manifest"
        env:
          BUILD_REASON: $(Build.Reason)
          BRANCH: $(Build.SourceBranch)
          DOCKER_REGISTRY: "quay.io"
          DOCKER_ORG: "strimzi-examples"
          DOCKER_TAG: '${{ parameters.dockerTag }}'
      - ${{ each arch in parameters.architectures }}:
          - bash: make docker_load docker_tag docker_push docker_amend_manifest docker_delete_archive
            displayName: "Push the ${{ arch }} containers and create manifest"
            env:
              BUILD_REASON: $(Build.Reason)
              BRANCH: $(Build.SourceBranch)
              DOCKER_REGISTRY: "quay.io"
              DOCKER_ORG: "strimzi-examples"
              DOCKER_TAG: '${{ parameters.dockerTag }}'
              DOCKER_ARCHITECTURE: ${{ arch }}
      - bash: "make docker_push_manifest"
        displayName: "Push container manifest"
        env:
          BUILD_REASON: $(Build.Reason)
          BRANCH: $(Build.SourceBranch)
          DOCKER_REGISTRY: "quay.io"
          DOCKER_ORG: "strimzi-examples"
          DOCKER_TAG: '${{ parameters.dockerTag }}'
      - bash: "make docker_sign_manifest"
        displayName: "Sign container manifest"
        env:
          BUILD_REASON: $(Build.Reason)
          BRANCH: $(Build.SourceBranch)
          BUILD_ID: $(Build.BuildId)
          BUILD_COMMIT: $(Build.SourceVersion)
          DOCKER_REGISTRY: "quay.io"
          DOCKER_ORG: "strimzi-examples"
          DOCKER_TAG: '${{ parameters.dockerTag }}'
          COSIGN_PASSWORD: $(COSIGN_PASSWORD)
          COSIGN_PRIVATE_KEY: $(COSIGN_PRIVATE_KEY)
